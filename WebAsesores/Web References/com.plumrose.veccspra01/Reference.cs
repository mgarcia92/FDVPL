//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Microsoft.VSDesigner generó automáticamente este código fuente, versión=4.0.30319.42000.
// 
#pragma warning disable 1591

namespace WebAsesores.com.plumrose.veccspra01 {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="serverOpsRepSoap", Namespace="http://www.xsales.biz/webservices/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(object[]))]
    public partial class serverOpsRep : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AboutVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecRepToXs2OperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecXs2ToRepOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecMasterDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecAsyncXSDownloadMasterDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecRldReloadOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecAsyncXSStatusProcesssOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecAsyncXSDownloadGeneralOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecAsyncXSUploadGeneralOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecAsyncXSDownloadReloadOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecRepDownloadMasterDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecRepDownloadGeneralOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecRepDownloadReloadOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecRepUploadGeneralOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecRepClearRouteOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecRepGeneralOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecAsyncXSClearRouteOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecAsyncGeneralOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecRepUploadGeneralRepOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecAsyncXSUploadGeneralRepOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecRouteCloneOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogGetProcessedFoldersOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogProcessFolderOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public serverOpsRep() {
            this.Url = global::WebAsesores.Properties.Settings.Default.WebAsesores_com_plumrose_veccspra01_serverOpsRep;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AboutVersionCompletedEventHandler AboutVersionCompleted;
        
        /// <remarks/>
        public event ExecRepToXs2CompletedEventHandler ExecRepToXs2Completed;
        
        /// <remarks/>
        public event ExecXs2ToRepCompletedEventHandler ExecXs2ToRepCompleted;
        
        /// <remarks/>
        public event ExecMasterDataCompletedEventHandler ExecMasterDataCompleted;
        
        /// <remarks/>
        public event ExecAsyncXSDownloadMasterDataCompletedEventHandler ExecAsyncXSDownloadMasterDataCompleted;
        
        /// <remarks/>
        public event ExecRldReloadCompletedEventHandler ExecRldReloadCompleted;
        
        /// <remarks/>
        public event ExecAsyncXSStatusProcesssCompletedEventHandler ExecAsyncXSStatusProcesssCompleted;
        
        /// <remarks/>
        public event ExecAsyncXSDownloadGeneralCompletedEventHandler ExecAsyncXSDownloadGeneralCompleted;
        
        /// <remarks/>
        public event ExecAsyncXSUploadGeneralCompletedEventHandler ExecAsyncXSUploadGeneralCompleted;
        
        /// <remarks/>
        public event ExecAsyncXSDownloadReloadCompletedEventHandler ExecAsyncXSDownloadReloadCompleted;
        
        /// <remarks/>
        public event ExecRepDownloadMasterDataCompletedEventHandler ExecRepDownloadMasterDataCompleted;
        
        /// <remarks/>
        public event ExecRepDownloadGeneralCompletedEventHandler ExecRepDownloadGeneralCompleted;
        
        /// <remarks/>
        public event ExecRepDownloadReloadCompletedEventHandler ExecRepDownloadReloadCompleted;
        
        /// <remarks/>
        public event ExecRepUploadGeneralCompletedEventHandler ExecRepUploadGeneralCompleted;
        
        /// <remarks/>
        public event ExecRepClearRouteCompletedEventHandler ExecRepClearRouteCompleted;
        
        /// <remarks/>
        public event ExecRepGeneralCompletedEventHandler ExecRepGeneralCompleted;
        
        /// <remarks/>
        public event ExecAsyncXSClearRouteCompletedEventHandler ExecAsyncXSClearRouteCompleted;
        
        /// <remarks/>
        public event ExecAsyncGeneralCompletedEventHandler ExecAsyncGeneralCompleted;
        
        /// <remarks/>
        public event ExecRepUploadGeneralRepCompletedEventHandler ExecRepUploadGeneralRepCompleted;
        
        /// <remarks/>
        public event ExecAsyncXSUploadGeneralRepCompletedEventHandler ExecAsyncXSUploadGeneralRepCompleted;
        
        /// <remarks/>
        public event ExecRouteCloneCompletedEventHandler ExecRouteCloneCompleted;
        
        /// <remarks/>
        public event LogGetProcessedFoldersCompletedEventHandler LogGetProcessedFoldersCompleted;
        
        /// <remarks/>
        public event LogProcessFolderCompletedEventHandler LogProcessFolderCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xsales.biz/webservices/AboutVersion", RequestNamespace="http://www.xsales.biz/webservices/", ResponseNamespace="http://www.xsales.biz/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AboutVersion() {
            object[] results = this.Invoke("AboutVersion", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AboutVersionAsync() {
            this.AboutVersionAsync(null);
        }
        
        /// <remarks/>
        public void AboutVersionAsync(object userState) {
            if ((this.AboutVersionOperationCompleted == null)) {
                this.AboutVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAboutVersionOperationCompleted);
            }
            this.InvokeAsync("AboutVersion", new object[0], this.AboutVersionOperationCompleted, userState);
        }
        
        private void OnAboutVersionOperationCompleted(object arg) {
            if ((this.AboutVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AboutVersionCompleted(this, new AboutVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xsales.biz/webservices/ExecRepToXs2", RequestNamespace="http://www.xsales.biz/webservices/", ResponseNamespace="http://www.xsales.biz/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] ExecRepToXs2(string ConnectionString) {
            object[] results = this.Invoke("ExecRepToXs2", new object[] {
                        ConnectionString});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void ExecRepToXs2Async(string ConnectionString) {
            this.ExecRepToXs2Async(ConnectionString, null);
        }
        
        /// <remarks/>
        public void ExecRepToXs2Async(string ConnectionString, object userState) {
            if ((this.ExecRepToXs2OperationCompleted == null)) {
                this.ExecRepToXs2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecRepToXs2OperationCompleted);
            }
            this.InvokeAsync("ExecRepToXs2", new object[] {
                        ConnectionString}, this.ExecRepToXs2OperationCompleted, userState);
        }
        
        private void OnExecRepToXs2OperationCompleted(object arg) {
            if ((this.ExecRepToXs2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecRepToXs2Completed(this, new ExecRepToXs2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xsales.biz/webservices/ExecXs2ToRep", RequestNamespace="http://www.xsales.biz/webservices/", ResponseNamespace="http://www.xsales.biz/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] ExecXs2ToRep(string ConnectionString, string route) {
            object[] results = this.Invoke("ExecXs2ToRep", new object[] {
                        ConnectionString,
                        route});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void ExecXs2ToRepAsync(string ConnectionString, string route) {
            this.ExecXs2ToRepAsync(ConnectionString, route, null);
        }
        
        /// <remarks/>
        public void ExecXs2ToRepAsync(string ConnectionString, string route, object userState) {
            if ((this.ExecXs2ToRepOperationCompleted == null)) {
                this.ExecXs2ToRepOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecXs2ToRepOperationCompleted);
            }
            this.InvokeAsync("ExecXs2ToRep", new object[] {
                        ConnectionString,
                        route}, this.ExecXs2ToRepOperationCompleted, userState);
        }
        
        private void OnExecXs2ToRepOperationCompleted(object arg) {
            if ((this.ExecXs2ToRepCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecXs2ToRepCompleted(this, new ExecXs2ToRepCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xsales.biz/webservices/ExecMasterData", RequestNamespace="http://www.xsales.biz/webservices/", ResponseNamespace="http://www.xsales.biz/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] ExecMasterData(string ConnectionString) {
            object[] results = this.Invoke("ExecMasterData", new object[] {
                        ConnectionString});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void ExecMasterDataAsync(string ConnectionString) {
            this.ExecMasterDataAsync(ConnectionString, null);
        }
        
        /// <remarks/>
        public void ExecMasterDataAsync(string ConnectionString, object userState) {
            if ((this.ExecMasterDataOperationCompleted == null)) {
                this.ExecMasterDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecMasterDataOperationCompleted);
            }
            this.InvokeAsync("ExecMasterData", new object[] {
                        ConnectionString}, this.ExecMasterDataOperationCompleted, userState);
        }
        
        private void OnExecMasterDataOperationCompleted(object arg) {
            if ((this.ExecMasterDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecMasterDataCompleted(this, new ExecMasterDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xsales.biz/webservices/ExecAsyncXSDownloadMasterData", RequestNamespace="http://www.xsales.biz/webservices/", ResponseNamespace="http://www.xsales.biz/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] ExecAsyncXSDownloadMasterData(string ConnectionString) {
            object[] results = this.Invoke("ExecAsyncXSDownloadMasterData", new object[] {
                        ConnectionString});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void ExecAsyncXSDownloadMasterDataAsync(string ConnectionString) {
            this.ExecAsyncXSDownloadMasterDataAsync(ConnectionString, null);
        }
        
        /// <remarks/>
        public void ExecAsyncXSDownloadMasterDataAsync(string ConnectionString, object userState) {
            if ((this.ExecAsyncXSDownloadMasterDataOperationCompleted == null)) {
                this.ExecAsyncXSDownloadMasterDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecAsyncXSDownloadMasterDataOperationCompleted);
            }
            this.InvokeAsync("ExecAsyncXSDownloadMasterData", new object[] {
                        ConnectionString}, this.ExecAsyncXSDownloadMasterDataOperationCompleted, userState);
        }
        
        private void OnExecAsyncXSDownloadMasterDataOperationCompleted(object arg) {
            if ((this.ExecAsyncXSDownloadMasterDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecAsyncXSDownloadMasterDataCompleted(this, new ExecAsyncXSDownloadMasterDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xsales.biz/webservices/ExecRldReload", RequestNamespace="http://www.xsales.biz/webservices/", ResponseNamespace="http://www.xsales.biz/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] ExecRldReload(string ConnectionString) {
            object[] results = this.Invoke("ExecRldReload", new object[] {
                        ConnectionString});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void ExecRldReloadAsync(string ConnectionString) {
            this.ExecRldReloadAsync(ConnectionString, null);
        }
        
        /// <remarks/>
        public void ExecRldReloadAsync(string ConnectionString, object userState) {
            if ((this.ExecRldReloadOperationCompleted == null)) {
                this.ExecRldReloadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecRldReloadOperationCompleted);
            }
            this.InvokeAsync("ExecRldReload", new object[] {
                        ConnectionString}, this.ExecRldReloadOperationCompleted, userState);
        }
        
        private void OnExecRldReloadOperationCompleted(object arg) {
            if ((this.ExecRldReloadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecRldReloadCompleted(this, new ExecRldReloadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xsales.biz/webservices/ExecAsyncXSStatusProcesss", RequestNamespace="http://www.xsales.biz/webservices/", ResponseNamespace="http://www.xsales.biz/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] ExecAsyncXSStatusProcesss(string ConnectionString, int trnId) {
            object[] results = this.Invoke("ExecAsyncXSStatusProcesss", new object[] {
                        ConnectionString,
                        trnId});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void ExecAsyncXSStatusProcesssAsync(string ConnectionString, int trnId) {
            this.ExecAsyncXSStatusProcesssAsync(ConnectionString, trnId, null);
        }
        
        /// <remarks/>
        public void ExecAsyncXSStatusProcesssAsync(string ConnectionString, int trnId, object userState) {
            if ((this.ExecAsyncXSStatusProcesssOperationCompleted == null)) {
                this.ExecAsyncXSStatusProcesssOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecAsyncXSStatusProcesssOperationCompleted);
            }
            this.InvokeAsync("ExecAsyncXSStatusProcesss", new object[] {
                        ConnectionString,
                        trnId}, this.ExecAsyncXSStatusProcesssOperationCompleted, userState);
        }
        
        private void OnExecAsyncXSStatusProcesssOperationCompleted(object arg) {
            if ((this.ExecAsyncXSStatusProcesssCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecAsyncXSStatusProcesssCompleted(this, new ExecAsyncXSStatusProcesssCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xsales.biz/webservices/ExecAsyncXSDownloadGeneral", RequestNamespace="http://www.xsales.biz/webservices/", ResponseNamespace="http://www.xsales.biz/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] ExecAsyncXSDownloadGeneral(string ConnectionString, string routeCode, string loadOrderCode) {
            object[] results = this.Invoke("ExecAsyncXSDownloadGeneral", new object[] {
                        ConnectionString,
                        routeCode,
                        loadOrderCode});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void ExecAsyncXSDownloadGeneralAsync(string ConnectionString, string routeCode, string loadOrderCode) {
            this.ExecAsyncXSDownloadGeneralAsync(ConnectionString, routeCode, loadOrderCode, null);
        }
        
        /// <remarks/>
        public void ExecAsyncXSDownloadGeneralAsync(string ConnectionString, string routeCode, string loadOrderCode, object userState) {
            if ((this.ExecAsyncXSDownloadGeneralOperationCompleted == null)) {
                this.ExecAsyncXSDownloadGeneralOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecAsyncXSDownloadGeneralOperationCompleted);
            }
            this.InvokeAsync("ExecAsyncXSDownloadGeneral", new object[] {
                        ConnectionString,
                        routeCode,
                        loadOrderCode}, this.ExecAsyncXSDownloadGeneralOperationCompleted, userState);
        }
        
        private void OnExecAsyncXSDownloadGeneralOperationCompleted(object arg) {
            if ((this.ExecAsyncXSDownloadGeneralCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecAsyncXSDownloadGeneralCompleted(this, new ExecAsyncXSDownloadGeneralCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xsales.biz/webservices/ExecAsyncXSUploadGeneral", RequestNamespace="http://www.xsales.biz/webservices/", ResponseNamespace="http://www.xsales.biz/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] ExecAsyncXSUploadGeneral(string ConnectionString) {
            object[] results = this.Invoke("ExecAsyncXSUploadGeneral", new object[] {
                        ConnectionString});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void ExecAsyncXSUploadGeneralAsync(string ConnectionString) {
            this.ExecAsyncXSUploadGeneralAsync(ConnectionString, null);
        }
        
        /// <remarks/>
        public void ExecAsyncXSUploadGeneralAsync(string ConnectionString, object userState) {
            if ((this.ExecAsyncXSUploadGeneralOperationCompleted == null)) {
                this.ExecAsyncXSUploadGeneralOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecAsyncXSUploadGeneralOperationCompleted);
            }
            this.InvokeAsync("ExecAsyncXSUploadGeneral", new object[] {
                        ConnectionString}, this.ExecAsyncXSUploadGeneralOperationCompleted, userState);
        }
        
        private void OnExecAsyncXSUploadGeneralOperationCompleted(object arg) {
            if ((this.ExecAsyncXSUploadGeneralCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecAsyncXSUploadGeneralCompleted(this, new ExecAsyncXSUploadGeneralCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xsales.biz/webservices/ExecAsyncXSDownloadReload", RequestNamespace="http://www.xsales.biz/webservices/", ResponseNamespace="http://www.xsales.biz/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] ExecAsyncXSDownloadReload(string ConnectionString, string rotCode, bool reload, string loadOrderCode) {
            object[] results = this.Invoke("ExecAsyncXSDownloadReload", new object[] {
                        ConnectionString,
                        rotCode,
                        reload,
                        loadOrderCode});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void ExecAsyncXSDownloadReloadAsync(string ConnectionString, string rotCode, bool reload, string loadOrderCode) {
            this.ExecAsyncXSDownloadReloadAsync(ConnectionString, rotCode, reload, loadOrderCode, null);
        }
        
        /// <remarks/>
        public void ExecAsyncXSDownloadReloadAsync(string ConnectionString, string rotCode, bool reload, string loadOrderCode, object userState) {
            if ((this.ExecAsyncXSDownloadReloadOperationCompleted == null)) {
                this.ExecAsyncXSDownloadReloadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecAsyncXSDownloadReloadOperationCompleted);
            }
            this.InvokeAsync("ExecAsyncXSDownloadReload", new object[] {
                        ConnectionString,
                        rotCode,
                        reload,
                        loadOrderCode}, this.ExecAsyncXSDownloadReloadOperationCompleted, userState);
        }
        
        private void OnExecAsyncXSDownloadReloadOperationCompleted(object arg) {
            if ((this.ExecAsyncXSDownloadReloadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecAsyncXSDownloadReloadCompleted(this, new ExecAsyncXSDownloadReloadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xsales.biz/webservices/ExecRepDownloadMasterData", RequestNamespace="http://www.xsales.biz/webservices/", ResponseNamespace="http://www.xsales.biz/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] ExecRepDownloadMasterData(string ConnectionString) {
            object[] results = this.Invoke("ExecRepDownloadMasterData", new object[] {
                        ConnectionString});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void ExecRepDownloadMasterDataAsync(string ConnectionString) {
            this.ExecRepDownloadMasterDataAsync(ConnectionString, null);
        }
        
        /// <remarks/>
        public void ExecRepDownloadMasterDataAsync(string ConnectionString, object userState) {
            if ((this.ExecRepDownloadMasterDataOperationCompleted == null)) {
                this.ExecRepDownloadMasterDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecRepDownloadMasterDataOperationCompleted);
            }
            this.InvokeAsync("ExecRepDownloadMasterData", new object[] {
                        ConnectionString}, this.ExecRepDownloadMasterDataOperationCompleted, userState);
        }
        
        private void OnExecRepDownloadMasterDataOperationCompleted(object arg) {
            if ((this.ExecRepDownloadMasterDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecRepDownloadMasterDataCompleted(this, new ExecRepDownloadMasterDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xsales.biz/webservices/ExecRepDownloadGeneral", RequestNamespace="http://www.xsales.biz/webservices/", ResponseNamespace="http://www.xsales.biz/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] ExecRepDownloadGeneral(string ConnectionString, string rotCode, string journeyCode) {
            object[] results = this.Invoke("ExecRepDownloadGeneral", new object[] {
                        ConnectionString,
                        rotCode,
                        journeyCode});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void ExecRepDownloadGeneralAsync(string ConnectionString, string rotCode, string journeyCode) {
            this.ExecRepDownloadGeneralAsync(ConnectionString, rotCode, journeyCode, null);
        }
        
        /// <remarks/>
        public void ExecRepDownloadGeneralAsync(string ConnectionString, string rotCode, string journeyCode, object userState) {
            if ((this.ExecRepDownloadGeneralOperationCompleted == null)) {
                this.ExecRepDownloadGeneralOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecRepDownloadGeneralOperationCompleted);
            }
            this.InvokeAsync("ExecRepDownloadGeneral", new object[] {
                        ConnectionString,
                        rotCode,
                        journeyCode}, this.ExecRepDownloadGeneralOperationCompleted, userState);
        }
        
        private void OnExecRepDownloadGeneralOperationCompleted(object arg) {
            if ((this.ExecRepDownloadGeneralCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecRepDownloadGeneralCompleted(this, new ExecRepDownloadGeneralCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xsales.biz/webservices/ExecRepDownloadReload", RequestNamespace="http://www.xsales.biz/webservices/", ResponseNamespace="http://www.xsales.biz/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] ExecRepDownloadReload(string ConnectionString, string rotCode, bool reload, string journeyCode) {
            object[] results = this.Invoke("ExecRepDownloadReload", new object[] {
                        ConnectionString,
                        rotCode,
                        reload,
                        journeyCode});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void ExecRepDownloadReloadAsync(string ConnectionString, string rotCode, bool reload, string journeyCode) {
            this.ExecRepDownloadReloadAsync(ConnectionString, rotCode, reload, journeyCode, null);
        }
        
        /// <remarks/>
        public void ExecRepDownloadReloadAsync(string ConnectionString, string rotCode, bool reload, string journeyCode, object userState) {
            if ((this.ExecRepDownloadReloadOperationCompleted == null)) {
                this.ExecRepDownloadReloadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecRepDownloadReloadOperationCompleted);
            }
            this.InvokeAsync("ExecRepDownloadReload", new object[] {
                        ConnectionString,
                        rotCode,
                        reload,
                        journeyCode}, this.ExecRepDownloadReloadOperationCompleted, userState);
        }
        
        private void OnExecRepDownloadReloadOperationCompleted(object arg) {
            if ((this.ExecRepDownloadReloadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecRepDownloadReloadCompleted(this, new ExecRepDownloadReloadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xsales.biz/webservices/ExecRepUploadGeneral", RequestNamespace="http://www.xsales.biz/webservices/", ResponseNamespace="http://www.xsales.biz/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] ExecRepUploadGeneral(string ConnectionString) {
            object[] results = this.Invoke("ExecRepUploadGeneral", new object[] {
                        ConnectionString});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void ExecRepUploadGeneralAsync(string ConnectionString) {
            this.ExecRepUploadGeneralAsync(ConnectionString, null);
        }
        
        /// <remarks/>
        public void ExecRepUploadGeneralAsync(string ConnectionString, object userState) {
            if ((this.ExecRepUploadGeneralOperationCompleted == null)) {
                this.ExecRepUploadGeneralOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecRepUploadGeneralOperationCompleted);
            }
            this.InvokeAsync("ExecRepUploadGeneral", new object[] {
                        ConnectionString}, this.ExecRepUploadGeneralOperationCompleted, userState);
        }
        
        private void OnExecRepUploadGeneralOperationCompleted(object arg) {
            if ((this.ExecRepUploadGeneralCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecRepUploadGeneralCompleted(this, new ExecRepUploadGeneralCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xsales.biz/webservices/ExecRepClearRoute", RequestNamespace="http://www.xsales.biz/webservices/", ResponseNamespace="http://www.xsales.biz/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] ExecRepClearRoute(string ConnectionString, string routeCode, string loadOrderCode, string JourneyUpdate) {
            object[] results = this.Invoke("ExecRepClearRoute", new object[] {
                        ConnectionString,
                        routeCode,
                        loadOrderCode,
                        JourneyUpdate});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void ExecRepClearRouteAsync(string ConnectionString, string routeCode, string loadOrderCode, string JourneyUpdate) {
            this.ExecRepClearRouteAsync(ConnectionString, routeCode, loadOrderCode, JourneyUpdate, null);
        }
        
        /// <remarks/>
        public void ExecRepClearRouteAsync(string ConnectionString, string routeCode, string loadOrderCode, string JourneyUpdate, object userState) {
            if ((this.ExecRepClearRouteOperationCompleted == null)) {
                this.ExecRepClearRouteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecRepClearRouteOperationCompleted);
            }
            this.InvokeAsync("ExecRepClearRoute", new object[] {
                        ConnectionString,
                        routeCode,
                        loadOrderCode,
                        JourneyUpdate}, this.ExecRepClearRouteOperationCompleted, userState);
        }
        
        private void OnExecRepClearRouteOperationCompleted(object arg) {
            if ((this.ExecRepClearRouteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecRepClearRouteCompleted(this, new ExecRepClearRouteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xsales.biz/webservices/ExecRepGeneral", RequestNamespace="http://www.xsales.biz/webservices/", ResponseNamespace="http://www.xsales.biz/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] ExecRepGeneral(string ConnectionString, string routeCode, int day, int month, int year, double exchangeRate, string dummy1, string dummy2, string dummy3) {
            object[] results = this.Invoke("ExecRepGeneral", new object[] {
                        ConnectionString,
                        routeCode,
                        day,
                        month,
                        year,
                        exchangeRate,
                        dummy1,
                        dummy2,
                        dummy3});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void ExecRepGeneralAsync(string ConnectionString, string routeCode, int day, int month, int year, double exchangeRate, string dummy1, string dummy2, string dummy3) {
            this.ExecRepGeneralAsync(ConnectionString, routeCode, day, month, year, exchangeRate, dummy1, dummy2, dummy3, null);
        }
        
        /// <remarks/>
        public void ExecRepGeneralAsync(string ConnectionString, string routeCode, int day, int month, int year, double exchangeRate, string dummy1, string dummy2, string dummy3, object userState) {
            if ((this.ExecRepGeneralOperationCompleted == null)) {
                this.ExecRepGeneralOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecRepGeneralOperationCompleted);
            }
            this.InvokeAsync("ExecRepGeneral", new object[] {
                        ConnectionString,
                        routeCode,
                        day,
                        month,
                        year,
                        exchangeRate,
                        dummy1,
                        dummy2,
                        dummy3}, this.ExecRepGeneralOperationCompleted, userState);
        }
        
        private void OnExecRepGeneralOperationCompleted(object arg) {
            if ((this.ExecRepGeneralCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecRepGeneralCompleted(this, new ExecRepGeneralCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xsales.biz/webservices/ExecAsyncXSClearRoute", RequestNamespace="http://www.xsales.biz/webservices/", ResponseNamespace="http://www.xsales.biz/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] ExecAsyncXSClearRoute(string ConnectionString, string rotCode, string loadOrderCode, string JourneyUpdate) {
            object[] results = this.Invoke("ExecAsyncXSClearRoute", new object[] {
                        ConnectionString,
                        rotCode,
                        loadOrderCode,
                        JourneyUpdate});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void ExecAsyncXSClearRouteAsync(string ConnectionString, string rotCode, string loadOrderCode, string JourneyUpdate) {
            this.ExecAsyncXSClearRouteAsync(ConnectionString, rotCode, loadOrderCode, JourneyUpdate, null);
        }
        
        /// <remarks/>
        public void ExecAsyncXSClearRouteAsync(string ConnectionString, string rotCode, string loadOrderCode, string JourneyUpdate, object userState) {
            if ((this.ExecAsyncXSClearRouteOperationCompleted == null)) {
                this.ExecAsyncXSClearRouteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecAsyncXSClearRouteOperationCompleted);
            }
            this.InvokeAsync("ExecAsyncXSClearRoute", new object[] {
                        ConnectionString,
                        rotCode,
                        loadOrderCode,
                        JourneyUpdate}, this.ExecAsyncXSClearRouteOperationCompleted, userState);
        }
        
        private void OnExecAsyncXSClearRouteOperationCompleted(object arg) {
            if ((this.ExecAsyncXSClearRouteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecAsyncXSClearRouteCompleted(this, new ExecAsyncXSClearRouteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xsales.biz/webservices/ExecAsyncGeneral", RequestNamespace="http://www.xsales.biz/webservices/", ResponseNamespace="http://www.xsales.biz/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] ExecAsyncGeneral(string ConnectionString, string rotCode, int day, int month, int year) {
            object[] results = this.Invoke("ExecAsyncGeneral", new object[] {
                        ConnectionString,
                        rotCode,
                        day,
                        month,
                        year});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void ExecAsyncGeneralAsync(string ConnectionString, string rotCode, int day, int month, int year) {
            this.ExecAsyncGeneralAsync(ConnectionString, rotCode, day, month, year, null);
        }
        
        /// <remarks/>
        public void ExecAsyncGeneralAsync(string ConnectionString, string rotCode, int day, int month, int year, object userState) {
            if ((this.ExecAsyncGeneralOperationCompleted == null)) {
                this.ExecAsyncGeneralOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecAsyncGeneralOperationCompleted);
            }
            this.InvokeAsync("ExecAsyncGeneral", new object[] {
                        ConnectionString,
                        rotCode,
                        day,
                        month,
                        year}, this.ExecAsyncGeneralOperationCompleted, userState);
        }
        
        private void OnExecAsyncGeneralOperationCompleted(object arg) {
            if ((this.ExecAsyncGeneralCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecAsyncGeneralCompleted(this, new ExecAsyncGeneralCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xsales.biz/webservices/ExecRepUploadGeneralRep", RequestNamespace="http://www.xsales.biz/webservices/", ResponseNamespace="http://www.xsales.biz/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] ExecRepUploadGeneralRep(string ConnectionString, string routeCode, string journeyCode) {
            object[] results = this.Invoke("ExecRepUploadGeneralRep", new object[] {
                        ConnectionString,
                        routeCode,
                        journeyCode});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void ExecRepUploadGeneralRepAsync(string ConnectionString, string routeCode, string journeyCode) {
            this.ExecRepUploadGeneralRepAsync(ConnectionString, routeCode, journeyCode, null);
        }
        
        /// <remarks/>
        public void ExecRepUploadGeneralRepAsync(string ConnectionString, string routeCode, string journeyCode, object userState) {
            if ((this.ExecRepUploadGeneralRepOperationCompleted == null)) {
                this.ExecRepUploadGeneralRepOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecRepUploadGeneralRepOperationCompleted);
            }
            this.InvokeAsync("ExecRepUploadGeneralRep", new object[] {
                        ConnectionString,
                        routeCode,
                        journeyCode}, this.ExecRepUploadGeneralRepOperationCompleted, userState);
        }
        
        private void OnExecRepUploadGeneralRepOperationCompleted(object arg) {
            if ((this.ExecRepUploadGeneralRepCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecRepUploadGeneralRepCompleted(this, new ExecRepUploadGeneralRepCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xsales.biz/webservices/ExecAsyncXSUploadGeneralRep", RequestNamespace="http://www.xsales.biz/webservices/", ResponseNamespace="http://www.xsales.biz/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] ExecAsyncXSUploadGeneralRep(string ConnectionString, string routeCode, string loadOrderCode) {
            object[] results = this.Invoke("ExecAsyncXSUploadGeneralRep", new object[] {
                        ConnectionString,
                        routeCode,
                        loadOrderCode});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void ExecAsyncXSUploadGeneralRepAsync(string ConnectionString, string routeCode, string loadOrderCode) {
            this.ExecAsyncXSUploadGeneralRepAsync(ConnectionString, routeCode, loadOrderCode, null);
        }
        
        /// <remarks/>
        public void ExecAsyncXSUploadGeneralRepAsync(string ConnectionString, string routeCode, string loadOrderCode, object userState) {
            if ((this.ExecAsyncXSUploadGeneralRepOperationCompleted == null)) {
                this.ExecAsyncXSUploadGeneralRepOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecAsyncXSUploadGeneralRepOperationCompleted);
            }
            this.InvokeAsync("ExecAsyncXSUploadGeneralRep", new object[] {
                        ConnectionString,
                        routeCode,
                        loadOrderCode}, this.ExecAsyncXSUploadGeneralRepOperationCompleted, userState);
        }
        
        private void OnExecAsyncXSUploadGeneralRepOperationCompleted(object arg) {
            if ((this.ExecAsyncXSUploadGeneralRepCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecAsyncXSUploadGeneralRepCompleted(this, new ExecAsyncXSUploadGeneralRepCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xsales.biz/webservices/ExecRouteClone", RequestNamespace="http://www.xsales.biz/webservices/", ResponseNamespace="http://www.xsales.biz/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] ExecRouteClone(string ConnectionString, string rotCodeSource, string rotCodeTarget, string tableName) {
            object[] results = this.Invoke("ExecRouteClone", new object[] {
                        ConnectionString,
                        rotCodeSource,
                        rotCodeTarget,
                        tableName});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void ExecRouteCloneAsync(string ConnectionString, string rotCodeSource, string rotCodeTarget, string tableName) {
            this.ExecRouteCloneAsync(ConnectionString, rotCodeSource, rotCodeTarget, tableName, null);
        }
        
        /// <remarks/>
        public void ExecRouteCloneAsync(string ConnectionString, string rotCodeSource, string rotCodeTarget, string tableName, object userState) {
            if ((this.ExecRouteCloneOperationCompleted == null)) {
                this.ExecRouteCloneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecRouteCloneOperationCompleted);
            }
            this.InvokeAsync("ExecRouteClone", new object[] {
                        ConnectionString,
                        rotCodeSource,
                        rotCodeTarget,
                        tableName}, this.ExecRouteCloneOperationCompleted, userState);
        }
        
        private void OnExecRouteCloneOperationCompleted(object arg) {
            if ((this.ExecRouteCloneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecRouteCloneCompleted(this, new ExecRouteCloneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xsales.biz/webservices/LogGetProcessedFolders", RequestNamespace="http://www.xsales.biz/webservices/", ResponseNamespace="http://www.xsales.biz/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] LogGetProcessedFolders(string id) {
            object[] results = this.Invoke("LogGetProcessedFolders", new object[] {
                        id});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void LogGetProcessedFoldersAsync(string id) {
            this.LogGetProcessedFoldersAsync(id, null);
        }
        
        /// <remarks/>
        public void LogGetProcessedFoldersAsync(string id, object userState) {
            if ((this.LogGetProcessedFoldersOperationCompleted == null)) {
                this.LogGetProcessedFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogGetProcessedFoldersOperationCompleted);
            }
            this.InvokeAsync("LogGetProcessedFolders", new object[] {
                        id}, this.LogGetProcessedFoldersOperationCompleted, userState);
        }
        
        private void OnLogGetProcessedFoldersOperationCompleted(object arg) {
            if ((this.LogGetProcessedFoldersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogGetProcessedFoldersCompleted(this, new LogGetProcessedFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.xsales.biz/webservices/LogProcessFolder", RequestNamespace="http://www.xsales.biz/webservices/", ResponseNamespace="http://www.xsales.biz/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ServiceResult LogProcessFolder(string id, string folderName) {
            object[] results = this.Invoke("LogProcessFolder", new object[] {
                        id,
                        folderName});
            return ((ServiceResult)(results[0]));
        }
        
        /// <remarks/>
        public void LogProcessFolderAsync(string id, string folderName) {
            this.LogProcessFolderAsync(id, folderName, null);
        }
        
        /// <remarks/>
        public void LogProcessFolderAsync(string id, string folderName, object userState) {
            if ((this.LogProcessFolderOperationCompleted == null)) {
                this.LogProcessFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogProcessFolderOperationCompleted);
            }
            this.InvokeAsync("LogProcessFolder", new object[] {
                        id,
                        folderName}, this.LogProcessFolderOperationCompleted, userState);
        }
        
        private void OnLogProcessFolderOperationCompleted(object arg) {
            if ((this.LogProcessFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogProcessFolderCompleted(this, new LogProcessFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.xsales.biz/webservices/")]
    public partial class ServiceResult {
        
        private bool isOKField;
        
        private string messageField;
        
        private string extendedMessageField;
        
        /// <remarks/>
        public bool IsOK {
            get {
                return this.isOKField;
            }
            set {
                this.isOKField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public string ExtendedMessage {
            get {
                return this.extendedMessageField;
            }
            set {
                this.extendedMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void AboutVersionCompletedEventHandler(object sender, AboutVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AboutVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AboutVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ExecRepToXs2CompletedEventHandler(object sender, ExecRepToXs2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecRepToXs2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecRepToXs2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ExecXs2ToRepCompletedEventHandler(object sender, ExecXs2ToRepCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecXs2ToRepCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecXs2ToRepCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ExecMasterDataCompletedEventHandler(object sender, ExecMasterDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecMasterDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecMasterDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ExecAsyncXSDownloadMasterDataCompletedEventHandler(object sender, ExecAsyncXSDownloadMasterDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecAsyncXSDownloadMasterDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecAsyncXSDownloadMasterDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ExecRldReloadCompletedEventHandler(object sender, ExecRldReloadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecRldReloadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecRldReloadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ExecAsyncXSStatusProcesssCompletedEventHandler(object sender, ExecAsyncXSStatusProcesssCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecAsyncXSStatusProcesssCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecAsyncXSStatusProcesssCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ExecAsyncXSDownloadGeneralCompletedEventHandler(object sender, ExecAsyncXSDownloadGeneralCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecAsyncXSDownloadGeneralCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecAsyncXSDownloadGeneralCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ExecAsyncXSUploadGeneralCompletedEventHandler(object sender, ExecAsyncXSUploadGeneralCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecAsyncXSUploadGeneralCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecAsyncXSUploadGeneralCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ExecAsyncXSDownloadReloadCompletedEventHandler(object sender, ExecAsyncXSDownloadReloadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecAsyncXSDownloadReloadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecAsyncXSDownloadReloadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ExecRepDownloadMasterDataCompletedEventHandler(object sender, ExecRepDownloadMasterDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecRepDownloadMasterDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecRepDownloadMasterDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ExecRepDownloadGeneralCompletedEventHandler(object sender, ExecRepDownloadGeneralCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecRepDownloadGeneralCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecRepDownloadGeneralCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ExecRepDownloadReloadCompletedEventHandler(object sender, ExecRepDownloadReloadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecRepDownloadReloadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecRepDownloadReloadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ExecRepUploadGeneralCompletedEventHandler(object sender, ExecRepUploadGeneralCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecRepUploadGeneralCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecRepUploadGeneralCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ExecRepClearRouteCompletedEventHandler(object sender, ExecRepClearRouteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecRepClearRouteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecRepClearRouteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ExecRepGeneralCompletedEventHandler(object sender, ExecRepGeneralCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecRepGeneralCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecRepGeneralCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ExecAsyncXSClearRouteCompletedEventHandler(object sender, ExecAsyncXSClearRouteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecAsyncXSClearRouteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecAsyncXSClearRouteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ExecAsyncGeneralCompletedEventHandler(object sender, ExecAsyncGeneralCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecAsyncGeneralCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecAsyncGeneralCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ExecRepUploadGeneralRepCompletedEventHandler(object sender, ExecRepUploadGeneralRepCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecRepUploadGeneralRepCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecRepUploadGeneralRepCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ExecAsyncXSUploadGeneralRepCompletedEventHandler(object sender, ExecAsyncXSUploadGeneralRepCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecAsyncXSUploadGeneralRepCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecAsyncXSUploadGeneralRepCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void ExecRouteCloneCompletedEventHandler(object sender, ExecRouteCloneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecRouteCloneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecRouteCloneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void LogGetProcessedFoldersCompletedEventHandler(object sender, LogGetProcessedFoldersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogGetProcessedFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogGetProcessedFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void LogProcessFolderCompletedEventHandler(object sender, LogProcessFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogProcessFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogProcessFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ServiceResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServiceResult)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591